name: CI/CD Pipeline

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      REGISTRY: ghcr.io
      NAMESPACE: ecommerceapp

    steps:
      # 1) Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2) Set up .NET
      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      # 3) Restore dependencies and build
      - name: Restore and build
        run: |
          dotnet restore
          dotnet build --no-restore -c Release

      # 4) Run tests
      - name: Run tests
        run: dotnet test --no-build -c Release || echo "No tests found"

      # 5) Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 6) Login to GitHub Container Registry
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 7) Build and push Docker images
      - name: Build and push Docker images
        run: |
          services=("cartservice" "orderservice" "productservice" "deliveryservice" "notificationservice" "paymentservice" "userservice" "gatewayservice")
          owner=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')

          for svc in "${services[@]}"; do
            echo "Building image for $svc..."
            docker buildx build \
              --platform linux/amd64 \
              -t ghcr.io/${owner}/$svc:${{ github.sha }} \
              -f ${svc^}.Api/Dockerfile \
              --push .
          done

      # 8) Set up kubectl
      - name: Set up kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'latest'

      # 9) Azure login
      - name: Azure login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # 10) Get AKS credentials
      - name: Get AKS credentials
        run: |
          az aks get-credentials \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --name ${{ secrets.AZURE_AKS_CLUSTER }} \
            --overwrite-existing

      # 11) Update deployments in AKS
      - name: Deploy updated images
        run: |
          services=("cartservice" "orderservice" "productservice" "deliveryservice" "notificationservice" "paymentservice" "userservice" "gatewayservice")

          for svc in "${services[@]}"; do
            echo "Updating deployment for $svc..."
            kubectl set image deployment/$svc $svc=$REGISTRY/${{ github.repository_owner }}/$svc:${{ github.sha }} -n $NAMESPACE
          done

      # 12) Wait for rollout to complete
      - name: Wait for rollout to complete
        run: |
          services=("cartservice" "orderservice" "productservice" "deliveryservice" "notificationservice" "paymentservice" "userservice" "gatewayservice")

          for svc in "${services[@]}"; do
            echo "Checking rollout for $svc..."
            if ! kubectl rollout status deployment/$svc -n $NAMESPACE --timeout=180s; then
              echo "Rollout failed for $svc"
              kubectl describe deployment/$svc -n $NAMESPACE
              kubectl get pods -n $NAMESPACE -l app=$svc -o wide
              kubectl logs -n $NAMESPACE -l app=$svc --tail=50
              exit 1
            fi
          done

      # 13) Print deployed images
      - name: Print deployed images
        run: |
          echo "Deployed images:"
          kubectl get deployments -n $NAMESPACE -o=jsonpath='{range .items[*]}{.metadata.name}{" -> "}{.spec.template.spec.containers[0].image}{"\n"}{end}'
