name: CI/CD Pipeline

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Restore
        run: dotnet restore

      - name: Build
        run: dotnet build -c Release --no-restore

      - name: Test
        run: dotnet test -c Release --no-build || echo "No tests found"

  docker-build:
    runs-on: ubuntu-latest
    needs: build-and-test
    strategy:
      fail-fast: false
      matrix:
        include:
          - service: cartservice
            dockerfile: CartService.Api/Dockerfile
          - service: orderservice
            dockerfile: OrderService.Api/Dockerfile
          - service: productservice
            dockerfile: ProductService.Api/Dockerfile
          - service: deliveryservice
            dockerfile: DeliveryService.Api/Dockerfile
          - service: notificationservice
            dockerfile: NotificationService.Api/Dockerfile
          - service: paymentservice
            dockerfile: PaymentService.Api/Dockerfile
          - service: userservice
            dockerfile: UserService.Api/Dockerfile
          - service: gatewayservice
            dockerfile: GatewayService/Dockerfile

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build & Push ${{ matrix.service }}
        run: |
          OWNER_LOWER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          IMAGE="ghcr.io/${OWNER_LOWER}/${{ matrix.service }}:${{ github.sha }}"

          echo "Building ${IMAGE} from ${{ matrix.dockerfile }}"
          docker buildx build \
            --platform linux/amd64 \
            -t "${IMAGE}" \
            -f "${{ matrix.dockerfile }}" \
            --push .

  deploy-to-aks:
    runs-on: ubuntu-latest
    needs: docker-build
    env:
      NAMESPACE: ecommerceapp
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get AKS credentials
        run: |
          az aks get-credentials \
            --resource-group "${{ secrets.AZURE_RESOURCE_GROUP }}" \
            --name "${{ secrets.AZURE_AKS_CLUSTER }}" \
            --overwrite-existing

      - name: Ensure namespace
        run: |
          kubectl create namespace $NAMESPACE --dry-run=client -o yaml | kubectl apply -f -

      - name: Ensure GHCR pull secret
        run: |
          kubectl create secret docker-registry ghcr-secret \
            --docker-server=ghcr.io \
            --docker-username="${{ github.actor }}" \
            --docker-password="${{ secrets.GHCR_TOKEN }}" \
            --namespace=$NAMESPACE \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Apply Kubernetes manifests
        run: |
          kubectl apply -f k8s/namespace.yaml
          kubectl apply -f k8s/

      - name: Update images to current commit
        run: |
          OWNER_LOWER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          services=(cartservice orderservice productservice deliveryservice notificationservice paymentservice userservice gatewayservice)
          for svc in "${services[@]}"; do
            kubectl set image deployment/$svc \
              $svc=ghcr.io/${OWNER_LOWER}/$svc:${{ github.sha }} \
              -n $NAMESPACE
          done

      - name: Wait for rollout
        run: |
          set -e
          services=(cartservice orderservice productservice deliveryservice notificationservice paymentservice userservice gatewayservice)
          for svc in "${services[@]}"; do
            echo "Checking rollout for $svc..."
            if ! kubectl rollout status deployment/$svc -n $NAMESPACE --timeout=180s; then
              echo "Rollout failed for $svc"
              kubectl describe deployment/$svc -n $NAMESPACE || true
              kubectl get pods -l app=$svc -n $NAMESPACE -o wide || true
              kubectl logs -l app=$svc -n $NAMESPACE --tail=200 || true
              exit 1
            fi
          done

      - name: Show deployed images
        run: |
          kubectl get deployments -n $NAMESPACE \
            -o=jsonpath='{range .items[*]}{.metadata.name}{" -> "}{.spec.template.spec.containers[0].image}{"\n"}{end}'
