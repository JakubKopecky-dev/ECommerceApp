name: CI/CD Pipeline
          
on:
    push:
        branches:
            - main
    pull_request:
        branches:
            - main
    workflow_dispatch:

jobs:
    # 1) Build and test all services
    build-and-test:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Setup .NET
              uses: actions/setup-dotnet@v4
              with:
                  dotnet-version: '9.0.x'

            - name: Restore dependencies
              run: dotnet restore

            - name: Build solution
              run: dotnet build --no-restore --configuration Release

            - name: Run tests
              run: dotnet test --no-build --configuration Release --verbosity normal

    # 2) Build & push docker images
    docker-build:
        runs-on: ubuntu-latest
        needs: build-and-test
        strategy:
            matrix:
                service: 
                    - CartService
                    - OrderService
                    - ProductService
                    - DeliveryService
                    - NotificationService
                    - PaymentService
                    - UserService
                    - GatewayService

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Set up QEMU
              uses: docker/setup-qemu-action@v3
              with:
                  platforms: all

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Log in to GitHub Container Registry
              uses: docker/login-action@v3
              with:
                  registry: ghcr.io
                  username: jakubkopecky-dev
                  password: ${{ secrets.GHCR_TOKEN }}

            - name: Build and push ${{ matrix.service }}
              run: |
                  SERVICE_TAG=$(echo "${{ matrix.service }}" | tr '[:upper:]' '[:lower:]')
                  COMMIT_TAG=${{ github.sha }}
                  IMAGE_NAME=ghcr.io/jakubkopecky-dev/$SERVICE_TAG

                  if [ "${{ matrix.service }}" = "GatewayService" ]; then
                      DOCKERFILE="GatewayService/Dockerfile"
                  else
                      DOCKERFILE="${{ matrix.service }}.Api/Dockerfile"
                  fi

                  echo "Building and pushing $IMAGE_NAME:$COMMIT_TAG for linux/amd64"
                  docker buildx build \
                      --platform linux/amd64 \
                      -t $IMAGE_NAME:$COMMIT_TAG \
                      -t $IMAGE_NAME:latest \
                      -f $DOCKERFILE \
                      --push .

    # 3) Deploy to Azure Kubernetes Service (AKS)
    deploy-to-aks:
        runs-on: ubuntu-latest
        needs: docker-build

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Azure Login
              uses: azure/login@v2
              with:
                  creds: ${{ secrets.AZURE_CREDENTIALS }}

            - name: Get AKS credentials
              run: |
                  az aks get-credentials \
                      --resource-group ecommerceapp-rg \
                      --name ecommerceapp-aks \
                      --overwrite-existing

            - name: Ensure namespace exists
              run: |
                  kubectl create namespace ecommerceapp --dry-run=client -o yaml | kubectl apply -f -

            - name: Recreate GHCR secret
              run: |
                  kubectl delete secret ghcr-secret -n ecommerceapp --ignore-not-found
                  kubectl create secret docker-registry ghcr-secret \
                      --docker-server=ghcr.io \
                      --docker-username=jakubkopecky-dev \
                      --docker-password="${{ secrets.GHCR_TOKEN }}" \
                      --namespace=ecommerceapp

            - name: Apply Kubernetes manifests
              run: |
                  echo "Applying manifests..."
                  kubectl apply -f k8s/namespace.yaml
                  kubectl apply -f k8s/

            - name: Patch deployments to use ghcr-secret
              run: |
                  for svc in cartservice orderservice productservice deliveryservice notificationservice paymentservice userservice gatewayservice; do
                      echo "Patching $svc to use ghcr-secret..."
                      kubectl patch deployment $svc -n ecommerceapp \
                          -p '{"spec": {"template": {"spec": {"imagePullSecrets": [{"name": "ghcr-secret"}]}}}}' || true
                  done

            - name: Update container images
              run: |
                  COMMIT_TAG=${{ github.sha }}
                  for svc in cartservice orderservice productservice deliveryservice notificationservice paymentservice userservice gatewayservice; do
                      echo "Updating image for $svc..."
                      kubectl set image deployment/$svc "*=ghcr.io/jakubkopecky-dev/${svc}:${COMMIT_TAG}" -n ecommerceapp || true
                  done

            - name: Wait for rollout
              run: |
                  for svc in cartservice orderservice productservice deliveryservice notificationservice paymentservice userservice gatewayservice; do
                      echo "Checking rollout for $svc..."
                      kubectl rollout status deployment/$svc -n ecommerceapp --timeout=180s || {
                          echo "Rollout failed for $svc"
                          kubectl describe pods -l app=$svc -n ecommerceapp || true
                          kubectl logs -l app=$svc -n ecommerceapp --tail=80 || true
                          exit 1
                      }
                  done

            - name: Verify deployments
              run: |
                  echo "Pods:"
                  kubectl get pods -n ecommerceapp -o wide
                  echo "Services:"
                  kubectl get svc -n ecommerceapp
